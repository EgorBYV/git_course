cls - очистить консоль (в маке это clear)

C помощью этих команд можно перейти в нужную директорию
dir (в маке это ls) - директории (узнать папки)
cd (название папки/
с помощь клавиши TAb можно быстро выбрать папку из списка, начав писать
cd.. - для входа в папку выше.
mkdir (название) - создание папки

перед тем, как начать работать впервые (если репозиторий версия не скачивается с репозитория вданную директорию) с выбранной директорией, её нужно сначала проинициализировать
git init - команда для инициализации директории

чтобы понять, что сейчас происходит с гитом нужно ввести команду - git status

будет написано в какой ветке (branch)  мы находимся (master), например
будет написано, есть ли закомиченые файлы
будут отмечены за какими файлами следит git - зелёный цвет
будут отмечены файлы за которыми git не следит - крассный цвет
чтобы начать сделить за файлом, нужно ввести команду git add (название файла)
чтобы перестать следить за файлом нужно ввести команду "git rm --cached <file>..."

в описании статуса также будет написаны команды, как начать следить и как перестать следить за файлами

чтобы добавить для слежения все новые или измененные файлы, нунжно написать "git add ."




.gitignore

Если мы нехотим, чтобы какие-то файлы попадали в git, то для этого существует специальный файл, который нужно внести в корень проекта
это .gitignore
в этом файле мы перечисляем файлы и папки, которые мы не хотим, чтобы попадали в гит. Перечисленные в нём файлы будут игнорироваться.

После внесения в gitignore файлов, которые нужно игнорировать, в команде git status эти файлы не будут отображаться и заливаться в репозиторий.
но сам файл .gitignore нужно затрекать, чтобы git про него знал.

тоже самое можно делать и с папками, добавлять их в файл .gitignore
при этом в VS CODE будет в панельке меняться цвета файлов




Работа с ветками:
 Если писать не в VS Code, а в консоли то можно прописать команду git branch
git branch - эта команда покажет, в какой ветке находимся и перечислит имеющиеся ветки

В идеале, чтобы другой разработчик не мешал работе, он должен создать другую ветку.
например, создадим ветку под названием test
git branch test - этой командой мы создаём ветку с названием test

удалить ветку test можно с помощью команды git branch -D test
git branch -D test - эта команда удаляет ветку с названием test. Удалять можно если мы случайно создали ветку или она нам большене нужна

чтобы переключиться на другую ветку из списка, нужно ввести следующую команду:
git checkout readme - команда переключает нас на ветку с названием readme

чтобы создать ветку и сразуна неё переключиться нужно написать команду:
git checkout - new - c помощью этой команды мы создаём ветку с названием new и переключаемся на неё

чтобы совместить ветки естькоманда git merge
она совмещается ветку, у которой находимся в данный момент (например, master) с веткой, которую укажем в команде (например, readme)
 git merge readme - c помощью этой команды мы совместили ветку, в которой находимся в веткой readme
 совмещенные ветки автоматически закомичены (навернео, если они были закомичены доэтого). ВОзможно для совмещения нужно предаврительно закомитить ветки

после совмещения можно удалить ненужную ветку. 
git branch -D readme (название ветки readme)







команды чтобы связаться с аккаунтом в GitHub (возможно это так):
git config --global user.name - узнать имя, под которымм работаем в GitHub
git config --global user.name "EgorBYV" - чтобы изменить имя на EgorBYV
git config --global user.email узнать почту, под которой работаем
git config --global user.email "название почты"

Чтобы привязать Git к репозитрию в GitHub нужно скопировать в GitHub нужную ссылку из выбранного репозитория (см. в описании репозитория)
НАпример, git remote add origin https://github.com/EgorBYV/git_course.git
после копирования просто вставить её в коандную строку Git



commit - фиксация версии в git (подготовка к отправке в репозиторий)
git commit -m "first commit1124313" (любое название в ковычках) - команда для подготовки к отправке в реопзиторий

Чтобы залить подготорвленную для отправки (закоммиченую) в реопзиторий нужно ввести команду:
 git push -u origin master, где master - это название ветки, поэтому в место этого слова может быть
  другое название, соответствующее нужной ветке


Чтобы выгрузить (клонировать) из репозитория нужно:
git clone https://github.com/EgorBYV/git_course.git (после команды вствить ссылку нанужный репозиторий)

после загрузки (клонирования) из репозитория в нужную папку, можно работать: писать код, изменять его. Аналогичным образом следя за изменениями в Git и 
подготавливая файлы для отправки в репозиторий на GitHub

далее чтобы загружать файлы в репозиторий просто команда git push
чтобы выгружать из репозитория git pull
